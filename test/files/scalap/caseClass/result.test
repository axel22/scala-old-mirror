case class CaseClass[A <: scala.Seq[scala.Int]](i : A, s : scala.Predef.String) extends java.lang.Object with scala.ScalaObject with scala.Product with scala.Serializable with scala.Product2[A, scala.Predef.String] {
  val i : A = { /* compiled code */ }
  val s : scala.Predef.String = { /* compiled code */ }
  def foo : scala.Int = { /* compiled code */ }
  def copy[A <: scala.Seq[scala.Int]](i : A, s : scala.Predef.String) : CaseClass[A] = { /* compiled code */ }
  override def productPrefix : java.lang.String = { /* compiled code */ }
  override def productIterator : scala.collection.Iterator[scala.Any] = { /* compiled code */ }
  def canEqual(x$1 : scala.Any) : scala.Boolean = { /* compiled code */ }
  def _1 : A = { /* compiled code */ }
  def _2 : scala.Predef.String = { /* compiled code */ }
  override def hashCode() : scala.Int = { /* compiled code */ }
  override def toString() : java.lang.String = { /* compiled code */ }
  override def equals(x$1 : scala.Any) : scala.Boolean = { /* compiled code */ }
}
